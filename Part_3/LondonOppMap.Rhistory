#leaflet
library(leaflet)
library(classInt)
library(sf)
library(sp)
library(magrittr)
library(reshape2)
library(dplyr)
library(shinyjs)
library(ggmap)
#breaks<-classIntervals(WorldCountriesMapData$PercentUrbanPopInSlums, n=5, style="jenks")
#breaks <- breaks$brks
pal <- colorBin(palette = "YlOrRd",
domain = WorldCountriesMapData$PercentUrbanPopInSlums, bins = 5)
MegacitiesMap <- st_as_sf(MegacitiesMap)
leaflet(WorldCountriesMapData) %>%
setView(lng = 4.6, lat = 3.8, zoom = 2)  %>%
addPolygons(stroke = FALSE,
fillOpacity = 0.8,
smoothFactor = 0.5,
fillColor = ~pal(WorldCountriesMapData$PercentUrbanPopInSlums),
popup = paste("Region: ", WorldCountriesMapData$NAME, "<br>",
"% of population living in slums: ", WorldCountriesMapData$PercentUrbanPopInSlums)
) %>%
addProviderTiles("CartoDB.DarkMatter") %>%
addCircles(data = MegacitiesMap,
~Longitude, ~Latitude,
popup= paste("Megacity: ", MegacitiesMap$Urban.Aggl, "<br>",
"2035 Estimated Population (in millions): ", MegacitiesMap$X2035.0),
weight = 8,
radius=50,
color="#1e7cff",
stroke = TRUE,
fillOpacity = 0.8) %>%
addLegend("bottomright",
pal= pal,
values = ~PercentUrbanPopInSlums,
title = "2035 Megacities & Percent of urban pop living in slums",
labFormat = labelFormat(prefix = "Threshold: "),
opacity = 0.7)
knitr::include_graphics("Part_2/Part2Q1a.png")
knitr::include_graphics("Part_2/Part2Q1b.png")
knitr::include_graphics("Part_2/Part2Q2a.png")
knitr::include_graphics("Part_2/Part2Q2b.png")
knitr::include_graphics("Part_2/Part2Q2c.png")
knitr::include_graphics("Part_2/Part2Q2d.png")
knitr::include_graphics("Part_2/Part2Q2e.png")
knitr::include_graphics("Part_2/Part2Q3a.png")
knitr::include_graphics("Part_2/Part2Q3b.png")
knitr::include_graphics("Part_2/Part2Q3c.png")
knitr::include_graphics("Part_2/Part2Q3d.png")
knitr::include_graphics("Part_2/Part2Q4a.png")
knitr::include_graphics("Part_2/Part2Q4b.png")
knitr::include_graphics("Part_2/Part2Q5a.png")
knitr::include_graphics("Part_2/Part2Q5b.png")
knitr::include_graphics("Part_2/Part2Q6a.png")
knitr::include_graphics("Part_2/Part2Q6f.png")
knitr::include_graphics("Part_2/Part2Q6g.png")
z_score <- function(input, colID){
attach(input)
data <- colID
mean <- mean(data)
sd <- sd(data)
for(i in 1:length(data)){
data[i] <-(data[i] - mean)/sd
}
return(input <- cbind(data))
}
#Set up
library(maptools)
library(RColorBrewer)
library(classInt)
library(sp)
library(rgeos)
library(tmap)
library(tmaptools)
library(sf)
library(rgdal)
library(geojsonio)
library(plotly)
library(methods)
library(rgdal)
library(sf)
library(plyr)
library(RCurl)
library(RJSONIO)
library(plyr)
library(tidyverse)
LondonWards <- readOGR("Part_3/NewLondonWard/NewLondonWard.shp", layer="NewLondonWard")
LondonWardsSF <- st_as_sf(LondonWards)
extradata <- read_csv("https://www.dropbox.com/s/qay9q1jwpffxcqj/LondonAdditionalDataFixed.csv?raw=1")
LondonWardsSF <- merge(LondonWardsSF, extradata, by.x = "WD11CD", by.y = "Wardcode")
LondonSub <- LondonWardsSF[,c(1:73,83:86)]
EducationalVariables <- data.frame(LondonSub$WD11CD,
LondonSub$AvgGCSE2011,
LondonSub$PctLev4Qua,
LondonSub$UnauthAbsenceSchools11)
EconomicVariables <- data.frame(LondonSub$WD11CD,
LondonSub$PopCensus2,
LondonSub$Employment,
LondonSub$NoJobs2011,
LondonSub$JSAClaim_1)
Neighborhood_Housing_Quality <- data.frame(LondonSub$WD11CD,
LondonSub$PopCensus2,
LondonSub$PctOwned20,
LondonSub$CrimeRate1)
No_Jobs_Normalized <- data.frame(EconomicVariables$LondonSub.NoJobs2011/EconomicVariables$LondonSub.PopCensus2)
Opportunity <- data.frame(LondonSub$WD11CD,
LondonSub$geometry,
LondonSub$WD11NM,
LondonSub$PopCensus2,
LondonSub$AvgGCSE2011,
LondonSub$PctLev4Qua,
LondonSub$UnauthAbsenceSchools11,
LondonSub$Employment,
LondonSub$NoJobs2011,
LondonSub$JSAClaim_1,
LondonSub$PctOwned20,
LondonSub$CrimeRate1)
Opportunity <- mutate(Opportunity,
Normalized_NoJobs = Opportunity$LondonSub.NoJobs2011/Opportunity$LondonSub.PopCensus2,
Normalized_CrimeRate =  Opportunity$LondonSub.CrimeRate1/Opportunity$LondonSub.PopCensus2
)
OpportunityMap <- Opportunity$geometry %>%
st_transform(crs = 4326) %>%
as("Spatial")
OpportunityMap <- st_as_sf(OpportunityMap)
OpportunityMap <- mutate(OpportunityMap,
WardCode = Opportunity$LondonSub.WD11CD,
WardName = Opportunity$LondonSub.WD11NM,
Population = Opportunity$LondonSub.PopCensus2,
AvgGCSE = Opportunity$LondonSub.AvgGCSE2011,
PctLvl4Qual = Opportunity$LondonSub.PctLev4Qua,
UnauthAbsc = Opportunity$LondonSub.UnauthAbsenceSchools11,
Employment = Opportunity$LondonSub.Employment,
No_Jobs = Opportunity$LondonSub.NoJobs2011,
JSA_Claim = Opportunity$LondonSub.JSAClaim_1,
PctHousingOwned = Opportunity$LondonSub.PctOwned20,
CrimeRate = Opportunity$LondonSub.CrimeRate1,
Normalized_CrimeRate = Opportunity$Normalized_CrimeRate,
Normalized_NoJobs = Opportunity$Normalized_NoJobs)
#Calculate z-scores
mean <- mean(OpportunityMap$Employment)
sd <- sd(OpportunityMap$Employment)
z_score <- function(input, colID){
attach(input)
data <- colID
mean <- mean(data)
sd <- sd(data)
for(i in 1:length(data)){
data[i] <-(data[i] - mean)/sd
}
return(input <- cbind(data))
}
Index2 <- data.frame(scale(OpportunityMap$PctLvl4Qual, center = TRUE, scale = TRUE))
Index2$scale.OpportunityMap.PctLvl4Qual..center...TRUE..scale...TRUE. <- NULL
Index2 <- mutate(Index2,
Lvl4Qual_Zscore =  as.numeric(z_score(OpportunityMap, PctLvl4Qual)),
AvgGCSE_Zscore = as.numeric(z_score(OpportunityMap, AvgGCSE)),
UnauthAbsc_Zscore = as.numeric(z_score(OpportunityMap, UnauthAbsc)),
Employment_Zscore = as.numeric(z_score(OpportunityMap, Employment)),
JSA_Claim_Zscore = as.numeric(z_score(OpportunityMap, JSA_Claim)),
HousingOwned_Zscore = as.numeric(z_score(OpportunityMap, PctHousingOwned)),
CrimeRate_Zscore = as.numeric(z_score(OpportunityMap, Normalized_CrimeRate)),
NoJobs_Zscore = as.numeric(z_score(OpportunityMap, Normalized_NoJobs))
)
Index2 <- mutate(Index2,
WardCode = OpportunityMap$WardCode,
WardName = OpportunityMap$WardName
)
Index2 <- mutate(Index2,
Geometry = OpportunityMap$geometry
)
Index2 <- mutate(Index2,
Index = (Index2$Lvl4Qual_Zscore + Index2$AvgGCSE_Zscore + Index2$UnauthAbsc_Zscore + Index2$Employment_Zscore + Index2$JSA_Claim_Zscore + Index2$HousingOwned_Zscore + Index2$CrimeRate_Zscore + Index2$NoJobs_Zscore)/8
)
#Summary Stats
#Visualize Summary Stats Table of Opportunity Variables
library(xtable)
sumtmp <- OpportunityMap
sumtmp$geometry <- NULL
sumtmp$WardCode <- NULL
sumtmp$WardName <- NULL
vnames <- colnames(sumtmp)
colnames(sumtmp) <- vnames
print(xtable(summary(sumtmp[1:3])), type = "html", include.rownames = F, size = "small")
print(xtable(summary(sumtmp[4:6])), type = "html", include.rownames = F, size = "small")
print(xtable(summary(sumtmp[7:10])), type = "html", include.rownames = F, size = "small")
tmap_mode("view")
tm_shape(OpportunityMap) +
tm_polygons("AvgGCSE",
style="jenks",
palette="YlOrRd",
midpoint=NA,
title="AvgGCSE Scores London Wards")
tm_shape(OpportunityMap) +
tm_polygons("PctLvl4Qual",
style="jenks",
palette="YlOrRd",
midpoint=NA,
title="% Level 4 Qualification")
tm_shape(OpportunityMap) +
tm_polygons("UnauthAbsc",
style="jenks",
palette="YlOrRd",
midpoint=NA,
title="Unauthorized Abscences")
tm_shape(OpportunityMap) +
tm_polygons("Employment",
style="jenks",
palette="YlOrRd",
midpoint=NA,
title="Employment Rate")
tm_shape(OpportunityMap) +
tm_polygons("No_Jobs",
style="jenks",
palette="YlOrRd",
midpoint=NA,
title="Number of Jobs per London Wards")
tm_shape(OpportunityMap) +
tm_polygons("CrimeRate",
style="jenks",
palette="YlOrRd",
midpoint=NA,
title="Crime Rate")
tm_shape(OpportunityMap) +
tm_polygons("JSA_Claim",
style="jenks",
palette="YlOrRd",
midpoint=NA,
title="JSA Claims")
tm_shape(OpportunityMap) +
tm_polygons("PctHousingOwned",
style="jenks",
palette="YlOrRd",
midpoint=NA,
title="% of Housing Owned")
library(reshape2)
#Visualize Distributions as Histograms
sumtmp$LogNoJobs <- log10(sumtmp$Normalized_NoJobs)
sumtmp$LogCrimeRate <- log10(sumtmp$Normalized_CrimeRate)
sumtmp$Normalized_CrimeRate <- NULL
sumtmp$Normalized_NoJobs <- NULL
ForMelting <- sumtmp
LondonMelt <- melt(ForMelting, id.vars = 0:0)
attach(LondonMelt)
hist2 <- ggplot(LondonMelt, aes(x=value)) + geom_histogram(aes(y = ..density..)) + geom_density(colour="red", size=1, adjust=1)
hist2 + facet_wrap(~ variable, scales="free")
sumtmp2 <- Index2
sumtmp2$WardCode <- NULL
sumtmp2$WardName <- NULL
sumtmp2$Geometry <- NULL
sumtmp2$Index <- NULL
sumtmp2$LogCrime_Zscore <- log10(sumtmp2$CrimeRate_Zscore)
sumtmp2$LogNoJobs_Zscore <- log10(sumtmp2$NoJobs_Zscore)
sumtmp2$CrimeRate_Zscore <- NULL
sumtmp2$NoJobs_Zscore <- NULL
ForMelting2 <- sumtmp2
LondonMelt2 <- melt(ForMelting2, id.vars = 0:0)
attach(LondonMelt2)
hist3 <- ggplot(LondonMelt2, aes(x=value)) + geom_histogram(aes(y = ..density..)) + geom_density(colour="red", size=1, adjust=1)
hist3 + facet_wrap(~ variable, scales="free")
print(summary(Index2$Index))
#Map the Index (Average of Z_scores for all variables) using tm_shape
Index2 <- st_as_sf(Index2)
#Interactive Leaflet Mapping for Opportunity index variables
library(leaflet)
library(sf)
library(sp)
library(magrittr)
library(classInt)
colours<- brewer.pal(5, "Blues")
breaks<-classIntervals(Index2$Index, n=5, style="jenks")
breaks <- breaks$brks
a <- list(c("Very Low", "Low","Medium","High","Very High"))
pal <- colorBin(palette = "YlOrRd",
domain = Index2$Index,
bins = breaks)
#Opportunity Map using interactive Leaflet
leaflet(Index2) %>%
addPolygons(stroke = FALSE,
fillOpacity = 0.7,
smoothFactor = 0.5,
color = ~pal(Index),
popup = paste("Ward:", Index2$WardName, "<br>",
"Index value:", Index2$Index)
) %>%
addProviderTiles("CartoDB.Positron") %>%
addLegend("bottomright",
pal= pal,
values = ~Index,
title = "Opportunity Map",
labFormat = labelFormat(suffix = ""),
opacity = 1
)
#Index distribution
breaks2 <- classIntervals(Index2$Index, n=5, style="quantile")
ggplot(data = Index2) +
geom_density(aes(x = Index)) +
xlim(-4,4) +
labs(x = "Values", y = "Density", title = "Opportunity index divided into quintiles") +
geom_vline(xintercept = breaks2$brks)
#Correlation Matrix Analysis
library(xtable)
library(corrplot)
#Opp Map
Index2DF <- st_set_geometry(Index2,NULL)
cormat2 <- cor(Index2DF[,1:8], use="complete.obs", method="pearson")
corrplot(cormat2)
#PCA
OppMapVariables <- Opportunity
pca1 = prcomp(na.omit(Index2DF[,1:8]), scale. = T)
print(xtable(summary(pca1)), type = "html")
plot(prcomp(na.omit(Index2DF[,1:8]), scale = T), main = "Principal components")
#Weights
rotation <- data.frame(pca1$rotation[,1])
qplot(data = rotation, x = pca1.rotation...1., y = row.names(rotation)) +
labs(x = "Weight in first principal component", y = NULL)
rotation2 <- data.frame(pca1$rotation[,2])
qplot(data = rotation2, x = pca1.rotation...2., y = row.names(rotation)) +
labs(x = "Weight in second principal component", y = NULL)
#***K-means Test
z_score <- Index2[,1:8]
z_score$Geometry <- NULL
z_score$Index <- Index2$Index
library(factoextra)
# Compute k-means with k = 4
set.seed(123)
km.res <- kmeans(z_score, 6, nstart = 25)
# Print the results
#print(km.res)
fviz_cluster(km.res, z_score, ellipse.type = "norm")
fviz_nbclust(z_score, kmeans, method = "wss") +
geom_vline(xintercept = 6, linetype = 2)
print(xtable(aggregate(z_score, by=list(cluster=km.res$cluster), mean)), type = "html", include.rownames = F, size = "small")
For_clustering <- Index2[,1:8]
For_clustering$Geometry <- NULL
For_clustering$Index <- Index2$Index
For_clustering <- For_clustering[ -c(619,624,625), ]
set.seed(123)
km.res2 <- kmeans(For_clustering, 5, nstart = 35)
# Print the results
fviz_cluster(km.res2, For_clustering, ellipse.type = FALSE)
fviz_nbclust(For_clustering, kmeans, method = "wss") +
geom_vline(xintercept = 5, linetype = 2)
print(xtable(aggregate(For_clustering, by=list(cluster=km.res2$cluster), mean)), type = "html", include.rownames = F, size = "small")
#Add the clusters as a new column to z_scores
z_score_k_means <- cbind(z_score, cluster = km.res$cluster)
z_score_k_means$WardName <- Index2$WardName
#Cluster Size
#km.res$size
#Centroids
#km.res$centers
#Map Clusters?
z_score_k_meansSF <- z_score_k_means
z_score_k_meansSF$Geometry <- Index2$Geometry
z_score_k_meansSF$WardCode <- Index2$WardCode
z_score_k_meansSF <- st_as_sf(z_score_k_meansSF)
z_score_k_meansSF$cluster <- as.numeric(z_score_k_meansSF$cluster)
breaks_clusters <- classIntervals(z_score_k_meansSF$cluster, n=6, style="quantile")
breaks_clusters <- breaks_clusters$brks
breaks_clusters
tmap_mode("view")
tm_shape(z_score_k_meansSF) +
tm_polygons(col = "cluster",
midpoint=NA,
popup.vars = "WardName",
title="K-means Clusters Map")
knitr::include_graphics("Part_1/Part1MegacitiesMap.png")
leaflet(WorldCountriesMapData) %>%
setView(lng = 4.6, lat = 3.8, zoom = 2)  %>%
addPolygons(stroke = FALSE,
fillOpacity = 0.8,
smoothFactor = 0.5,
fillColor = ~pal(WorldCountriesMapData$PercentUrbanPopInSlums),
popup = paste("Region: ", WorldCountriesMapData$NAME, "<br>",
"% of population living in slums: ", WorldCountriesMapData$PercentUrbanPopInSlums)
) %>%
addProviderTiles("CartoDB.DarkMatter") %>%
addCircles(data = MegacitiesMap,
~Longitude, ~Latitude,
popup= paste("Megacity: ", MegacitiesMap$Urban.Aggl, "<br>",
"2035 Estimated Population (in millions): ", MegacitiesMap$X2035.0),
weight = 10,
radius=60,
color="#1e7cff",
stroke = TRUE,
fillOpacity = 0.8) %>%
addLegend("bottomright",
pal= pal,
values = ~PercentUrbanPopInSlums,
title = "2035 Megacities & Percent of urban pop living in slums",
labFormat = labelFormat(prefix = "Threshold: "),
opacity = 0.7)
leaflet(WorldCountriesMapData) %>%
setView(lng = 4.6, lat = 3.8, zoom = 2)  %>%
addPolygons(stroke = FALSE,
fillOpacity = 0.8,
smoothFactor = 0.5,
fillColor = ~pal(WorldCountriesMapData$PercentUrbanPopInSlums),
popup = paste("Region: ", WorldCountriesMapData$NAME, "<br>",
"% of population living in slums: ", WorldCountriesMapData$PercentUrbanPopInSlums)
) %>%
addProviderTiles("CartoDB.DarkMatter") %>%
addCircles(data = MegacitiesMap,
~Longitude, ~Latitude,
popup= paste("Megacity: ", MegacitiesMap$Urban.Aggl, "<br>",
"2035 Estimated Population (in millions): ", MegacitiesMap$X2035.0),
weight = 8,
radius=50,
color="#1e7cff",
stroke = TRUE,
fillOpacity = 0.8) %>%
addLegend("bottomright",
pal= pal,
values = ~PercentUrbanPopInSlums,
title = "2035 Megacities & Percent of urban pop living in slums",
labFormat = labelFormat(prefix = "Threshold: "),
opacity = 0.7)
#Read in CSV Files
UrbanSlumsPop <- read.csv("Part_1/Urban_Slums_Pop.csv", header = TRUE, sep = ",")
names(UrbanSlumsPop)[names(UrbanSlumsPop)=="Population.living.in.slums....of.urban.population.....of.urban.population."] <- "PercentUrbanPopInSlums"
MegacitiesCSV <- read.csv("Part_1/MegaCities_2035_Data.csv", header = TRUE, sep = ",")
#Read in Shapefiles
library(tidyverse)
library(plotly)
library(maptools)
library(RColorBrewer)
library(classInt)
library(sp)
library(rgeos)
library(tmap)
library(tmaptools)
library(sf)
library(rgdal)
library(geojsonio)
library(methods)
library(ggplot2)
WorldCountriesMap <- read_shape("Part_1/WC_Backup/WorldCountriesBackupSHP.shp", as.sf = TRUE)
MegacitiesMap <- read_shape("Part_1/Megacities_Part1.shp", as.sf = TRUE)
WorldCountriesMapData <- WorldCountriesMap %>% left_join(UrbanSlumsPop, by = c("GMI_CNTRY" = "Code" ))
library(tmap)
library(tmaptools)
library(jsonlite)
#leaflet
library(leaflet)
library(classInt)
library(sf)
library(sp)
library(magrittr)
library(reshape2)
library(dplyr)
library(shinyjs)
library(ggmap)
#breaks<-classIntervals(WorldCountriesMapData$PercentUrbanPopInSlums, n=5, style="jenks")
#breaks <- breaks$brks
pal <- colorBin(palette = "YlOrRd",
domain = WorldCountriesMapData$PercentUrbanPopInSlums, bins = 5)
MegacitiesMap <- st_as_sf(MegacitiesMap)
leaflet(WorldCountriesMapData) %>%
setView(lng = 4.6, lat = 3.8, zoom = 2)  %>%
addPolygons(stroke = FALSE,
fillOpacity = 0.8,
smoothFactor = 0.5,
fillColor = ~pal(WorldCountriesMapData$PercentUrbanPopInSlums),
popup = paste("Region: ", WorldCountriesMapData$NAME, "<br>",
"% of population living in slums: ", WorldCountriesMapData$PercentUrbanPopInSlums)
) %>%
addProviderTiles("CartoDB.DarkMatter") %>%
addCircles(data = MegacitiesMap,
~Longitude, ~Latitude,
popup= paste("Megacity: ", MegacitiesMap$Urban.Aggl, "<br>",
"2035 Estimated Population (in millions): ", MegacitiesMap$X2035.0),
weight = 8,
radius=50,
color="#1e7cff",
stroke = TRUE,
fillOpacity = 0.8) %>%
addLegend("bottomright",
pal= pal,
values = ~PercentUrbanPopInSlums,
title = "2035 Megacities & Percent of urban pop living in slums",
labFormat = labelFormat(prefix = "Threshold: "),
opacity = 0.7)
leaflet(WorldCountriesMapData) %>%
setView(lng = 4.6, lat = 3.8, zoom = 2)  %>%
addPolygons(stroke = FALSE,
fillOpacity = 0.8,
smoothFactor = 0.5,
fillColor = ~pal(WorldCountriesMapData$PercentUrbanPopInSlums),
popup = paste("Region: ", WorldCountriesMapData$NAME, "<br>",
"% of population living in slums: ", WorldCountriesMapData$PercentUrbanPopInSlums)
) %>%
addProviderTiles("CartoDB.DarkMatter") %>%
addCircles(data = MegacitiesMap,
~Longitude, ~Latitude,
popup= paste("Megacity: ", MegacitiesMap$Urban.Aggl, "<br>",
"2035 Estimated Population (in millions): ", MegacitiesMap$X2035.0),
weight = 12,
radius=70,
color="#1e7cff",
stroke = TRUE,
fillOpacity = 0.8) %>%
addLegend("bottomright",
pal= pal,
values = ~PercentUrbanPopInSlums,
title = "2035 Megacities & Percent of urban pop living in slums",
labFormat = labelFormat(prefix = "Threshold: "),
opacity = 0.7)
knitr::include_graphics("Part_2/z_score_formula.png")
save.image("~/Desktop/gis_code2/Part_3/Part3.RData")
savehistory("~/Desktop/gis_code2/Part_3/LondonOppMap.Rhistory")
